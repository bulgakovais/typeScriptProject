import { baseURL } from "./index.js";
import { getSearchData } from "../helpers/getSearchData.js";
import { renderToast } from "../lib.js";
export function fetchToBookPlace(event) {
    const { getdateIn, getdateOut, } = getSearchData();
    const placeId = event.target.dataset.placeid;
    const placeName = event.target.dataset.name;
    const checkIn = new Date(getdateIn).getTime();
    const checkOut = new Date(getdateOut).getTime();
    // Получаем все даты между checkIn и checkOut в формате Unix
    function allDate(checkIn, checkOut) {
        let dateArr = [];
        for (let i = checkIn; i <= checkOut;) {
            dateArr.push(i);
            console.log(dateArr);
            i = i + 24 * 60 * 60 * 1000;
        }
        return dateArr;
    }
    const allBookedData = allDate(checkIn, checkOut);
    //
    fetch(baseURL + `/places/${placeId}?checkInDate=${checkIn}&checkOutDate=${checkOut}`, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            bookedDates: allBookedData
        })
    })
        .then(response => response.json())
        .then(() => {
        renderToast({
            text: [`Вы успешно забронировали номер в отеле ${placeName} c ${getdateIn} по ${getdateOut}.`],
            type: 'success'
        }, {
            name: 'Отлично!',
            handler: () => {
                console.log(`Уведомление закрыто, ${placeName}`);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hUb0Jvb2tQbGFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BUEkvZmV0Y2hUb0Jvb2tQbGFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBR3ZDLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFLO0lBRXBDLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxHQUFHLEdBQUcsYUFBYSxFQUFFLENBQUE7SUFFbEQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFBO0lBQzVDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQTtJQUUzQyxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUUvQyw0REFBNEQ7SUFDNUQsU0FBUyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVE7UUFDaEMsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUMsSUFBSSxRQUFRLEdBQUc7WUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUVmLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDcEIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUE7U0FDNUI7UUFDRCxPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDO0lBR0QsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUVoRCxFQUFFO0lBQ0YsS0FBSyxDQUFDLE9BQU8sR0FBRyxXQUFXLE9BQU8sZ0JBQWdCLE9BQU8saUJBQWlCLFFBQVEsRUFBRSxFQUFFO1FBQ3BGLE1BQU0sRUFBRSxPQUFPO1FBQ2YsT0FBTyxFQUFFO1lBQ1AsY0FBYyxFQUFFLGtCQUFrQjtTQUNuQztRQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ25CLFdBQVcsRUFBRSxhQUFhO1NBQzNCLENBQUM7S0FDSCxDQUFDO1NBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2pDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDVCxXQUFXLENBQ1Q7WUFDRSxJQUFJLEVBQUUsQ0FBQywwQ0FBMEMsU0FBUyxNQUFNLFNBQVMsT0FBTyxVQUFVLEdBQUcsQ0FBQztZQUM5RixJQUFJLEVBQUUsU0FBUztTQUNoQixFQUNEO1lBQ0UsSUFBSSxFQUFFLFVBQVU7WUFDaEIsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEVBQUUsQ0FBQyxDQUFBO1lBQ2xELENBQUM7U0FDRixDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtBQUVOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlVVJMIH0gZnJvbSBcIi4vaW5kZXguanNcIlxuaW1wb3J0IHsgZ2V0U2VhcmNoRGF0YSB9IGZyb20gXCIuLi9oZWxwZXJzL2dldFNlYXJjaERhdGEuanNcIlxuaW1wb3J0IHsgcmVuZGVyVG9hc3QgfSBmcm9tIFwiLi4vbGliLmpzXCJcblxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hUb0Jvb2tQbGFjZShldmVudCkge1xuXG4gIGNvbnN0IHsgZ2V0ZGF0ZUluLCBnZXRkYXRlT3V0LCB9ID0gZ2V0U2VhcmNoRGF0YSgpXG5cbiAgY29uc3QgcGxhY2VJZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LnBsYWNlaWRcbiAgY29uc3QgcGxhY2VOYW1lID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQubmFtZVxuXG4gIGNvbnN0IGNoZWNrSW4gPSBuZXcgRGF0ZShnZXRkYXRlSW4pLmdldFRpbWUoKVxuICBjb25zdCBjaGVja091dCA9IG5ldyBEYXRlKGdldGRhdGVPdXQpLmdldFRpbWUoKVxuXG4gIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LLRgdC1INC00LDRgtGLINC80LXQttC00YMgY2hlY2tJbiDQuCBjaGVja091dCDQsiDRhNC+0YDQvNCw0YLQtSBVbml4XG4gIGZ1bmN0aW9uIGFsbERhdGUoY2hlY2tJbiwgY2hlY2tPdXQpIHtcbiAgICBsZXQgZGF0ZUFyciA9IFtdXG4gICAgZm9yIChsZXQgaSA9IGNoZWNrSW47IGkgPD0gY2hlY2tPdXQ7KSB7XG4gICAgICBkYXRlQXJyLnB1c2goaSlcblxuICAgICAgY29uc29sZS5sb2coZGF0ZUFycilcbiAgICAgIGkgPSBpICsgMjQgKiA2MCAqIDYwICogMTAwMFxuICAgIH1cbiAgICByZXR1cm4gZGF0ZUFyclxuICB9XG5cblxuICBjb25zdCBhbGxCb29rZWREYXRhID0gYWxsRGF0ZShjaGVja0luLCBjaGVja091dClcblxuICAvL1xuICBmZXRjaChiYXNlVVJMICsgYC9wbGFjZXMvJHtwbGFjZUlkfT9jaGVja0luRGF0ZT0ke2NoZWNrSW59JmNoZWNrT3V0RGF0ZT0ke2NoZWNrT3V0fWAsIHtcbiAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgYm9va2VkRGF0ZXM6IGFsbEJvb2tlZERhdGFcbiAgICB9KVxuICB9KVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICByZW5kZXJUb2FzdChcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IFtg0JLRiyDRg9GB0L/QtdGI0L3QviDQt9Cw0LHRgNC+0L3QuNGA0L7QstCw0LvQuCDQvdC+0LzQtdGAINCyINC+0YLQtdC70LUgJHtwbGFjZU5hbWV9IGMgJHtnZXRkYXRlSW59INC/0L4gJHtnZXRkYXRlT3V0fS5gXSxcbiAgICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICfQntGC0LvQuNGH0L3QviEnLFxuICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDQo9Cy0LXQtNC+0LzQu9C10L3QuNC1INC30LDQutGA0YvRgtC+LCAke3BsYWNlTmFtZX1gKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuXG59XG4iXX0=