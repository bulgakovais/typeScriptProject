const ONE_DAY = 1;
const THREE_DAY = 3;
const ONE_MONTH = 1;
const TWO_MONTH = 2;
let today = new Date();
let currDate = today.getDate().toString().padStart(2, "0");
let currMontNum = today.getMonth() + ONE_MONTH;
let currMonth = (today.getMonth() + ONE_MONTH).toString().padStart(2, "0");
let nextMonth = (today.getMonth() + TWO_MONTH).toString().padStart(2, "0");
let currYear = today.getFullYear();
let lastDayDate = (new Date(today.getFullYear(), today.getMonth() + TWO_MONTH, 0)).toLocaleString('RU', { day: 'numeric' });
let nextDay = today.getDate() + ONE_DAY;
let afterTwoDay = today.getDate() + THREE_DAY;
const lastDay = getLastDayMonth(currYear, currMontNum);
export const todayDMY = `${currYear}-${currMonth}-${currDate}`;
export const defaultDateIn = getDefaultDateIn();
export const defaultDateOff = getDefaultDateOff();
export const lastDayNextMonth = `${currYear}-${nextMonth}-${lastDayDate}`;
function getDefaultDateIn() {
    if (today.getDate() == lastDay) {
        currMonth = (today.getMonth() + TWO_MONTH).toString().padStart(2, "0");
        nextDay = 1;
    }
    return `${currYear}-${currMonth}-${nextDay.toString().padStart(2, "0")}`;
}
function getDefaultDateOff() {
    if (today.getDate() == lastDay) {
        currMonth = (today.getMonth() + TWO_MONTH).toString().padStart(2, "0");
        afterTwoDay = 3;
    }
    return `${currYear}-${currMonth}-${afterTwoDay.toString().padStart(2, "0")}`;
}
function getLastDayMonth(currYear, currMontNum) {
    let date = new Date(currYear, currMontNum, 0);
    return date.getDate();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQTtBQUNuQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUE7QUFDbkIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFBO0FBRW5CLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7QUFDdkIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0QsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQTtBQUM5QyxJQUFJLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzNFLElBQUksU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0UsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ25DLElBQUksV0FBVyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDNUgsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQTtBQUN2QyxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFBO0FBQzdDLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUE7QUFFdEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFXLEdBQUcsUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FBQTtBQUN0RSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQVcsZ0JBQWdCLEVBQUUsQ0FBQTtBQUN2RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsaUJBQWlCLEVBQUUsQ0FBQTtBQUN6RCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBVyxHQUFHLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxFQUFFLENBQUE7QUFHakYsU0FBUyxnQkFBZ0I7SUFDdkIsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFO1FBQzlCLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sR0FBRyxDQUFDLENBQUE7S0FDWjtJQUFDLE9BQU8sR0FBRyxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUE7QUFDNUUsQ0FBQztBQUVELFNBQVMsaUJBQWlCO0lBQ3hCLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLE9BQU8sRUFBRTtRQUM5QixTQUFTLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2RSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0tBQ2hCO0lBQUMsT0FBTyxHQUFHLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQTtBQUNoRixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsUUFBZ0IsRUFBRSxXQUFtQjtJQUM1RCxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzdDLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IE9ORV9EQVkgPSAxXG5jb25zdCBUSFJFRV9EQVkgPSAzXG5jb25zdCBPTkVfTU9OVEggPSAxXG5jb25zdCBUV09fTU9OVEggPSAyXG5cbmxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG5sZXQgY3VyckRhdGUgPSB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG5sZXQgY3Vyck1vbnROdW0gPSB0b2RheS5nZXRNb250aCgpICsgT05FX01PTlRIXG5sZXQgY3Vyck1vbnRoID0gKHRvZGF5LmdldE1vbnRoKCkgKyBPTkVfTU9OVEgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xubGV0IG5leHRNb250aCA9ICh0b2RheS5nZXRNb250aCgpICsgVFdPX01PTlRIKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbmxldCBjdXJyWWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG5sZXQgbGFzdERheURhdGUgPSAobmV3IERhdGUodG9kYXkuZ2V0RnVsbFllYXIoKSwgdG9kYXkuZ2V0TW9udGgoKSArIFRXT19NT05USCwgMCkpLnRvTG9jYWxlU3RyaW5nKCdSVScsIHsgZGF5OiAnbnVtZXJpYycgfSk7XG5sZXQgbmV4dERheSA9IHRvZGF5LmdldERhdGUoKSArIE9ORV9EQVlcbmxldCBhZnRlclR3b0RheSA9IHRvZGF5LmdldERhdGUoKSArIFRIUkVFX0RBWVxuY29uc3QgbGFzdERheSA9IGdldExhc3REYXlNb250aChjdXJyWWVhciwgY3Vyck1vbnROdW0pXG5cbmV4cG9ydCBjb25zdCB0b2RheURNWTogc3RyaW5nID0gYCR7Y3VyclllYXJ9LSR7Y3Vyck1vbnRofS0ke2N1cnJEYXRlfWBcbmV4cG9ydCBjb25zdCBkZWZhdWx0RGF0ZUluOiBzdHJpbmcgPSBnZXREZWZhdWx0RGF0ZUluKClcbmV4cG9ydCBjb25zdCBkZWZhdWx0RGF0ZU9mZjogc3RyaW5nID0gZ2V0RGVmYXVsdERhdGVPZmYoKVxuZXhwb3J0IGNvbnN0IGxhc3REYXlOZXh0TW9udGg6IHN0cmluZyA9IGAke2N1cnJZZWFyfS0ke25leHRNb250aH0tJHtsYXN0RGF5RGF0ZX1gXG5cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERhdGVJbigpIHtcbiAgaWYgKHRvZGF5LmdldERhdGUoKSA9PSBsYXN0RGF5KSB7XG4gICAgY3Vyck1vbnRoID0gKHRvZGF5LmdldE1vbnRoKCkgKyBUV09fTU9OVEgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIG5leHREYXkgPSAxXG4gIH0gcmV0dXJuIGAke2N1cnJZZWFyfS0ke2N1cnJNb250aH0tJHtuZXh0RGF5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfWBcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERhdGVPZmYoKSB7XG4gIGlmICh0b2RheS5nZXREYXRlKCkgPT0gbGFzdERheSkge1xuICAgIGN1cnJNb250aCA9ICh0b2RheS5nZXRNb250aCgpICsgVFdPX01PTlRIKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgICBhZnRlclR3b0RheSA9IDNcbiAgfSByZXR1cm4gYCR7Y3VyclllYXJ9LSR7Y3Vyck1vbnRofS0ke2FmdGVyVHdvRGF5LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfWBcbn1cblxuZnVuY3Rpb24gZ2V0TGFzdERheU1vbnRoKGN1cnJZZWFyOiBudW1iZXIsIGN1cnJNb250TnVtOiBudW1iZXIpIHtcbiAgbGV0IGRhdGUgPSBuZXcgRGF0ZShjdXJyWWVhciwgY3Vyck1vbnROdW0sIDApXG4gIHJldHVybiBkYXRlLmdldERhdGUoKVxufVxuIl19