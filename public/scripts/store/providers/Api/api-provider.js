import { defaultDateIn, defaultDateOff } from "../../../dates.js";
import { Place } from "../../domain/place.js";
import { HttpHelper } from "../../utils/http-helper.js";
export class APIProvider {
    async find(filter) {
        return HttpHelper.fetchAsJson(APIProvider.apiUrl + '/places?' + this.convertFilterToQueryString(filter))
            .then((response) => {
            console.log(response);
            // // проверим, что с ответ корректный
            // this.assertIsValidResponse(response)
            return this.convertPlaceListResponse(response);
        });
    }
    async getById(id) {
        return HttpHelper.fetchAsJson(APIProvider.apiUrl + '/places/' +
            id)
            .then((response) => {
            // // проверим, что с ответ корректный
            // this.assertIsValidResponse(response)
            return this.convertPlaceResponse(response);
        });
    }
    convertFilterToQueryString(filter) {
        const coordinates = `59.9386,30.3141`;
        const checkIn = new Date(filter.checkInDate).getTime() || new Date(defaultDateIn).getTime();
        const checkOut = new Date(filter.checkOutDate).getTime() || new Date(defaultDateOff).getTime();
        return `coordinates=${coordinates}&checkInDate=${checkIn}&checkOutDate=${checkOut}&maxPrice=${filter.priceLimit}`;
    }
    convertPlaceListResponse(response) {
        return response.map((item) => {
            return this.convertPlaceResponse(item);
        });
    }
    convertPlaceResponse(item) {
        return new Place(APIProvider.provider, String(item.id), item.name, item.description, item.image, item.price, item.bookedDates, this.getRemoteness(0));
    }
    getRemoteness(remoteness) {
        return remoteness;
    }
}
APIProvider.provider = 'API';
APIProvider.apiUrl = 'http://localhost:3030';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3N0b3JlL3Byb3ZpZGVycy9BcGkvYXBpLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUd4RCxNQUFNLE9BQU8sV0FBVztJQU1mLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBc0I7UUFFdEMsT0FBTyxVQUFVLENBQUMsV0FBVyxDQUMzQixXQUFXLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQzFFO2FBQ0UsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNyQixzQ0FBc0M7WUFDdEMsdUNBQXVDO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBVTtRQUM3QixPQUFPLFVBQVUsQ0FBQyxXQUFXLENBQVcsV0FBVyxDQUFDLE1BQU0sR0FBRyxVQUFVO1lBQ3JFLEVBQUUsQ0FBQzthQUNGLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLHNDQUFzQztZQUN0Qyx1Q0FBdUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRU8sMEJBQTBCLENBQUMsTUFBc0I7UUFFdkQsTUFBTSxXQUFXLEdBQUcsaUJBQWlCLENBQUE7UUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzNGLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUU5RixPQUFPLGVBQWUsV0FBVyxnQkFBZ0IsT0FBTyxpQkFBaUIsUUFBUSxhQUFhLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNuSCxDQUFDO0lBR08sd0JBQXdCLENBQUMsUUFBb0I7UUFDbkQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDeEMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRU8sb0JBQW9CLENBQUMsSUFBYztRQUN6QyxPQUFPLElBQUksS0FBSyxDQUNkLFdBQVcsQ0FBQyxRQUFRLEVBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQ2YsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FDdEIsQ0FBQTtJQUNILENBQUM7SUFFTyxhQUFhLENBQUMsVUFBa0I7UUFDdEMsT0FBTyxVQUFVLENBQUE7SUFDbkIsQ0FBQzs7QUF6RGEsb0JBQVEsR0FBRyxLQUFLLENBQUE7QUFFZixrQkFBTSxHQUFHLHVCQUF1QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdERhdGVJbiwgZGVmYXVsdERhdGVPZmYgfSBmcm9tIFwiLi4vLi4vLi4vZGF0ZXMuanNcIjtcbmltcG9ydCB7IFBsYWNlIH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9wbGFjZS5qc1wiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vZG9tYWluL3Byb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBTZWFyY2hGb3JtRGF0YSB9IGZyb20gXCIuLi8uLi9kb21haW4vc2VhcmNoLWZpbHRlci5qc1wiO1xuaW1wb3J0IHsgSHR0cEhlbHBlciB9IGZyb20gXCIuLi8uLi91dGlscy9odHRwLWhlbHBlci5qc1wiO1xuaW1wb3J0IHsgYXBpUGxhY2UgfSBmcm9tIFwiLi9hcGktcmVzcG9uc2UuanNcIjtcblxuZXhwb3J0IGNsYXNzIEFQSVByb3ZpZGVyIGltcGxlbWVudHMgUHJvdmlkZXIge1xuXG5cbiAgcHVibGljIHN0YXRpYyBwcm92aWRlciA9ICdBUEknXG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXBpVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAzMCdcbiAgcHVibGljIGFzeW5jIGZpbmQoZmlsdGVyOiBTZWFyY2hGb3JtRGF0YSk6IFByb21pc2U8UGxhY2VbXT4ge1xuXG4gICAgcmV0dXJuIEh0dHBIZWxwZXIuZmV0Y2hBc0pzb248YXBpUGxhY2VbXT4oXG4gICAgICBBUElQcm92aWRlci5hcGlVcmwgKyAnL3BsYWNlcz8nICsgdGhpcy5jb252ZXJ0RmlsdGVyVG9RdWVyeVN0cmluZyhmaWx0ZXIpXG4gICAgKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKVxuICAgICAgICAvLyAvLyDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0YEg0L7RgtCy0LXRgiDQutC+0YDRgNC10LrRgtC90YvQuVxuICAgICAgICAvLyB0aGlzLmFzc2VydElzVmFsaWRSZXNwb25zZShyZXNwb25zZSlcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFBsYWNlTGlzdFJlc3BvbnNlKHJlc3BvbnNlKVxuICAgICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRCeUlkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFBsYWNlPiB7XG4gICAgcmV0dXJuIEh0dHBIZWxwZXIuZmV0Y2hBc0pzb248YXBpUGxhY2U+KEFQSVByb3ZpZGVyLmFwaVVybCArICcvcGxhY2VzLycgK1xuICAgICAgaWQpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgLy8gLy8g0L/RgNC+0LLQtdGA0LjQvCwg0YfRgtC+INGBINC+0YLQstC10YIg0LrQvtGA0YDQtdC60YLQvdGL0LlcbiAgICAgICAgLy8gdGhpcy5hc3NlcnRJc1ZhbGlkUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRQbGFjZVJlc3BvbnNlKHJlc3BvbnNlKVxuICAgICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydEZpbHRlclRvUXVlcnlTdHJpbmcoZmlsdGVyOiBTZWFyY2hGb3JtRGF0YSk6IHN0cmluZyB7XG5cbiAgICBjb25zdCBjb29yZGluYXRlcyA9IGA1OS45Mzg2LDMwLjMxNDFgXG4gICAgY29uc3QgY2hlY2tJbiA9IG5ldyBEYXRlKGZpbHRlci5jaGVja0luRGF0ZSkuZ2V0VGltZSgpIHx8IG5ldyBEYXRlKGRlZmF1bHREYXRlSW4pLmdldFRpbWUoKVxuICAgIGNvbnN0IGNoZWNrT3V0ID0gbmV3IERhdGUoZmlsdGVyLmNoZWNrT3V0RGF0ZSkuZ2V0VGltZSgpIHx8IG5ldyBEYXRlKGRlZmF1bHREYXRlT2ZmKS5nZXRUaW1lKClcblxuICAgIHJldHVybiBgY29vcmRpbmF0ZXM9JHtjb29yZGluYXRlc30mY2hlY2tJbkRhdGU9JHtjaGVja0lufSZjaGVja091dERhdGU9JHtjaGVja091dH0mbWF4UHJpY2U9JHtmaWx0ZXIucHJpY2VMaW1pdH1gXG4gIH1cblxuXG4gIHByaXZhdGUgY29udmVydFBsYWNlTGlzdFJlc3BvbnNlKHJlc3BvbnNlOiBhcGlQbGFjZVtdKTogUGxhY2VbXSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydFBsYWNlUmVzcG9uc2UoaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0UGxhY2VSZXNwb25zZShpdGVtOiBhcGlQbGFjZSk6IFBsYWNlIHtcbiAgICByZXR1cm4gbmV3IFBsYWNlKFxuICAgICAgQVBJUHJvdmlkZXIucHJvdmlkZXIsXG4gICAgICBTdHJpbmcoaXRlbS5pZCksXG4gICAgICBpdGVtLm5hbWUsXG4gICAgICBpdGVtLmRlc2NyaXB0aW9uLFxuICAgICAgaXRlbS5pbWFnZSxcbiAgICAgIGl0ZW0ucHJpY2UsXG4gICAgICBpdGVtLmJvb2tlZERhdGVzLFxuICAgICAgdGhpcy5nZXRSZW1vdGVuZXNzKDApXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZW1vdGVuZXNzKHJlbW90ZW5lc3M6IG51bWJlcikge1xuICAgIHJldHVybiByZW1vdGVuZXNzXG4gIH1cbn1cbiJdfQ==