import { defaultDateIn, defaultDateOff } from "../../../dates.js";
import { Place } from "../../domain/place.js";
import { HttpHelper } from "../../utils/http-helper.js";
export class APIProvider {
    find(filter) {
        return HttpHelper.fetchAsJson(APIProvider.apiUrl + '/places?' + this.convertFilterToQueryString(filter))
            .then((response) => {
            console.log(response);
            // // проверим, что с ответ корректный
            // this.assertIsValidResponse(response)
            return this.convertPlaceListResponse(response);
        });
    }
    getById(id) {
        return HttpHelper.fetchAsJson(APIProvider.apiUrl + '/places/' +
            id)
            .then((response) => {
            // // проверим, что с ответ корректный
            // this.assertIsValidResponse(response)
            return this.convertPlaceResponse(response);
        });
    }
    convertFilterToQueryString(filter) {
        const coordinates = `59.9386,30.3141`;
        const checkIn = new Date(filter.checkInDate).getTime() || new Date(defaultDateIn).getTime();
        const checkOut = new Date(filter.checkOutDate).getTime() || new Date(defaultDateOff).getTime();
        return `coordinates=${coordinates}&checkInDate=${checkIn}&checkOutDate=${checkOut}&maxPrice=${filter.priceLimit}`;
    }
    convertPlaceListResponse(response) {
        return response.map((item) => {
            return this.convertPlaceResponse(item);
        });
    }
    convertPlaceResponse(item) {
        return new Place(APIProvider.provider, Number(item.id), item.name, item.description, item.image, item.price, item.bookedDates, this.getRemoteness(0));
    }
    getRemoteness(remoteness) {
        return remoteness;
    }
}
APIProvider.provider = 'API';
APIProvider.apiUrl = 'http://localhost:3030';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3N0b3JlL3Byb3ZpZGVycy9BcGkvYXBpLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUd4RCxNQUFNLE9BQU8sV0FBVztJQU1mLElBQUksQ0FBQyxNQUFzQjtRQUVoQyxPQUFPLFVBQVUsQ0FBQyxXQUFXLENBQzNCLFdBQVcsQ0FBQyxNQUFNLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FDMUU7YUFDRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3JCLHNDQUFzQztZQUN0Qyx1Q0FBdUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRU0sT0FBTyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxVQUFVLENBQUMsV0FBVyxDQUFXLFdBQVcsQ0FBQyxNQUFNLEdBQUcsVUFBVTtZQUNyRSxFQUFFLENBQUM7YUFDRixJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixzQ0FBc0M7WUFDdEMsdUNBQXVDO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzVDLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVPLDBCQUEwQixDQUFDLE1BQXNCO1FBRXZELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFBO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMzRixNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFOUYsT0FBTyxlQUFlLFdBQVcsZ0JBQWdCLE9BQU8saUJBQWlCLFFBQVEsYUFBYSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDbkgsQ0FBQztJQUdPLHdCQUF3QixDQUFDLFFBQW9CO1FBQ25ELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzNCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3hDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVPLG9CQUFvQixDQUFDLElBQWM7UUFDekMsT0FBTyxJQUFJLEtBQUssQ0FDZCxXQUFXLENBQUMsUUFBUSxFQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUNmLElBQUksQ0FBQyxJQUFJLEVBQ1QsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQ3RCLENBQUE7SUFDSCxDQUFDO0lBRU8sYUFBYSxDQUFDLFVBQWtCO1FBQ3RDLE9BQU8sVUFBVSxDQUFBO0lBQ25CLENBQUM7O0FBekRhLG9CQUFRLEdBQUcsS0FBSyxDQUFBO0FBRWYsa0JBQU0sR0FBRyx1QkFBdUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHREYXRlSW4sIGRlZmF1bHREYXRlT2ZmIH0gZnJvbSBcIi4uLy4uLy4uL2RhdGVzLmpzXCI7XG5pbXBvcnQgeyBQbGFjZSB9IGZyb20gXCIuLi8uLi9kb21haW4vcGxhY2UuanNcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9wcm92aWRlci5qc1wiO1xuaW1wb3J0IHsgU2VhcmNoRm9ybURhdGEgfSBmcm9tIFwiLi4vLi4vZG9tYWluL3NlYXJjaC1maWx0ZXIuanNcIjtcbmltcG9ydCB7IEh0dHBIZWxwZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaHR0cC1oZWxwZXIuanNcIjtcbmltcG9ydCB7IGFwaVBsYWNlIH0gZnJvbSBcIi4vYXBpLXJlc3BvbnNlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBBUElQcm92aWRlciBpbXBsZW1lbnRzIFByb3ZpZGVyIHtcblxuXG4gIHB1YmxpYyBzdGF0aWMgcHJvdmlkZXIgPSAnQVBJJ1xuXG4gIHByaXZhdGUgc3RhdGljIGFwaVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMzAnXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogU2VhcmNoRm9ybURhdGEpOiBQcm9taXNlPFBsYWNlW10+IHtcblxuICAgIHJldHVybiBIdHRwSGVscGVyLmZldGNoQXNKc29uPGFwaVBsYWNlW10+KFxuICAgICAgQVBJUHJvdmlkZXIuYXBpVXJsICsgJy9wbGFjZXM/JyArIHRoaXMuY29udmVydEZpbHRlclRvUXVlcnlTdHJpbmcoZmlsdGVyKVxuICAgIClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSlcbiAgICAgICAgLy8gLy8g0L/RgNC+0LLQtdGA0LjQvCwg0YfRgtC+INGBINC+0YLQstC10YIg0LrQvtGA0YDQtdC60YLQvdGL0LlcbiAgICAgICAgLy8gdGhpcy5hc3NlcnRJc1ZhbGlkUmVzcG9uc2UocmVzcG9uc2UpXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRQbGFjZUxpc3RSZXNwb25zZShyZXNwb25zZSlcbiAgICAgIH0pXG4gIH1cblxuICBwdWJsaWMgZ2V0QnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxQbGFjZT4ge1xuICAgIHJldHVybiBIdHRwSGVscGVyLmZldGNoQXNKc29uPGFwaVBsYWNlPihBUElQcm92aWRlci5hcGlVcmwgKyAnL3BsYWNlcy8nICtcbiAgICAgIGlkKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIC8vIC8vINC/0YDQvtCy0LXRgNC40LwsINGH0YLQviDRgSDQvtGC0LLQtdGCINC60L7RgNGA0LXQutGC0L3Ri9C5XG4gICAgICAgIC8vIHRoaXMuYXNzZXJ0SXNWYWxpZFJlc3BvbnNlKHJlc3BvbnNlKVxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0UGxhY2VSZXNwb25zZShyZXNwb25zZSlcbiAgICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRGaWx0ZXJUb1F1ZXJ5U3RyaW5nKGZpbHRlcjogU2VhcmNoRm9ybURhdGEpOiBzdHJpbmcge1xuXG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBgNTkuOTM4NiwzMC4zMTQxYFxuICAgIGNvbnN0IGNoZWNrSW4gPSBuZXcgRGF0ZShmaWx0ZXIuY2hlY2tJbkRhdGUpLmdldFRpbWUoKSB8fCBuZXcgRGF0ZShkZWZhdWx0RGF0ZUluKS5nZXRUaW1lKClcbiAgICBjb25zdCBjaGVja091dCA9IG5ldyBEYXRlKGZpbHRlci5jaGVja091dERhdGUpLmdldFRpbWUoKSB8fCBuZXcgRGF0ZShkZWZhdWx0RGF0ZU9mZikuZ2V0VGltZSgpXG5cbiAgICByZXR1cm4gYGNvb3JkaW5hdGVzPSR7Y29vcmRpbmF0ZXN9JmNoZWNrSW5EYXRlPSR7Y2hlY2tJbn0mY2hlY2tPdXREYXRlPSR7Y2hlY2tPdXR9Jm1heFByaWNlPSR7ZmlsdGVyLnByaWNlTGltaXR9YFxuICB9XG5cblxuICBwcml2YXRlIGNvbnZlcnRQbGFjZUxpc3RSZXNwb25zZShyZXNwb25zZTogYXBpUGxhY2VbXSk6IFBsYWNlW10ge1xuICAgIHJldHVybiByZXNwb25zZS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRQbGFjZVJlc3BvbnNlKGl0ZW0pXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFBsYWNlUmVzcG9uc2UoaXRlbTogYXBpUGxhY2UpOiBQbGFjZSB7XG4gICAgcmV0dXJuIG5ldyBQbGFjZShcbiAgICAgIEFQSVByb3ZpZGVyLnByb3ZpZGVyLFxuICAgICAgTnVtYmVyKGl0ZW0uaWQpLFxuICAgICAgaXRlbS5uYW1lLFxuICAgICAgaXRlbS5kZXNjcmlwdGlvbixcbiAgICAgIGl0ZW0uaW1hZ2UsXG4gICAgICBpdGVtLnByaWNlLFxuICAgICAgaXRlbS5ib29rZWREYXRlcyxcbiAgICAgIHRoaXMuZ2V0UmVtb3RlbmVzcygwKVxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVtb3RlbmVzcyhyZW1vdGVuZXNzOiBudW1iZXIpIHtcbiAgICByZXR1cm4gcmVtb3RlbmVzc1xuICB9XG59XG4iXX0=