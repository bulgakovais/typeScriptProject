import { renderSearchResultsBlock } from "../search-results.js";
import { APIProvider } from "../store/providers/Api/api-provider.js";
import { SDKProvider } from '../store/providers/SDK/sdk-provider.js';
import { getSearchData } from "./getSearchData.js";
export function searchHandler() {
    const { getdateIn, getdateOut, getmaxPrice } = getSearchData();
    const searchFormData = {
        city: 'Санкт-Петербург',
        checkInDate: new Date(getdateIn),
        checkOutDate: new Date(getdateOut),
        priceLimit: getmaxPrice
    };
    const sdkSearch = new SDKProvider();
    const apiSearch = new APIProvider();
    function sortByPrice(one, two) {
        if (one.price > two.price) {
            return 1;
        }
        else if (one.price < two.price) {
            return -1;
        }
        else {
            return 0;
        }
    }
    // ---------------------------------------------------
    // ?? Не запускается код начиная с then() на 38 строке
    // ---------------------------------------------------
    Promise.all([
        apiSearch.find(searchFormData),
        sdkSearch.find(searchFormData)
    ]).then((results) => {
        console.log(results);
        // мерджим все результаты в один
        const allResults = [].concat(results[0], results[1]);
        console.log(allResults);
        // работаем с ними как с единым целым
        allResults.sort(sortByPrice);
        console.log(allResults);
        renderSearchResultsBlock(allResults);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9zZWFyY2gtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUcvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0NBQXdDLENBQUE7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUVsRCxNQUFNLFVBQVUsYUFBYTtJQUUzQixNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsR0FBRyxhQUFhLEVBQUUsQ0FBQTtJQUU5RCxNQUFNLGNBQWMsR0FBbUI7UUFDckMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbEMsVUFBVSxFQUFFLFdBQVc7S0FDeEIsQ0FBQTtJQUVELE1BQU0sU0FBUyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUE7SUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQTtJQUduQyxTQUFTLFdBQVcsQ0FBQyxHQUFVLEVBQUUsR0FBVTtRQUV6QyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUN6QixPQUFPLENBQUMsQ0FBQTtTQUNUO2FBQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDaEMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNWO2FBQU07WUFDTCxPQUFPLENBQUMsQ0FBQTtTQUNUO0lBQ0gsQ0FBQztJQUVELHNEQUFzRDtJQUN0RCxzREFBc0Q7SUFDdEQsc0RBQXNEO0lBRXRELE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDVixTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUM5QixTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUMvQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQixnQ0FBZ0M7UUFDaEMsTUFBTSxVQUFVLEdBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2QixxQ0FBcUM7UUFDckMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3ZCLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3RDLENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgcmVuZGVyU2VhcmNoUmVzdWx0c0Jsb2NrIH0gZnJvbSBcIi4uL3NlYXJjaC1yZXN1bHRzLmpzXCJcbmltcG9ydCB7IFBsYWNlIH0gZnJvbSBcIi4uL3N0b3JlL2RvbWFpbi9wbGFjZS5qc1wiXG5pbXBvcnQgeyBTZWFyY2hGb3JtRGF0YSB9IGZyb20gXCIuLi9zdG9yZS9kb21haW4vc2VhcmNoLWZpbHRlci5qc1wiXG5pbXBvcnQgeyBBUElQcm92aWRlciB9IGZyb20gXCIuLi9zdG9yZS9wcm92aWRlcnMvQXBpL2FwaS1wcm92aWRlci5qc1wiXG5pbXBvcnQgeyBTREtQcm92aWRlciB9IGZyb20gJy4uL3N0b3JlL3Byb3ZpZGVycy9TREsvc2RrLXByb3ZpZGVyLmpzJ1xuaW1wb3J0IHsgZ2V0U2VhcmNoRGF0YSB9IGZyb20gXCIuL2dldFNlYXJjaERhdGEuanNcIlxuXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoSGFuZGxlcigpIHtcblxuICBjb25zdCB7IGdldGRhdGVJbiwgZ2V0ZGF0ZU91dCwgZ2V0bWF4UHJpY2UgfSA9IGdldFNlYXJjaERhdGEoKVxuXG4gIGNvbnN0IHNlYXJjaEZvcm1EYXRhOiBTZWFyY2hGb3JtRGF0YSA9IHtcbiAgICBjaXR5OiAn0KHQsNC90LrRgi3Qn9C10YLQtdGA0LHRg9GA0LMnLFxuICAgIGNoZWNrSW5EYXRlOiBuZXcgRGF0ZShnZXRkYXRlSW4pLFxuICAgIGNoZWNrT3V0RGF0ZTogbmV3IERhdGUoZ2V0ZGF0ZU91dCksXG4gICAgcHJpY2VMaW1pdDogZ2V0bWF4UHJpY2VcbiAgfVxuXG4gIGNvbnN0IHNka1NlYXJjaCA9IG5ldyBTREtQcm92aWRlcigpXG4gIGNvbnN0IGFwaVNlYXJjaCA9IG5ldyBBUElQcm92aWRlcigpXG5cblxuICBmdW5jdGlvbiBzb3J0QnlQcmljZShvbmU6IFBsYWNlLCB0d286IFBsYWNlKSB7XG5cbiAgICBpZiAob25lLnByaWNlID4gdHdvLnByaWNlKSB7XG4gICAgICByZXR1cm4gMVxuICAgIH0gZWxzZSBpZiAob25lLnByaWNlIDwgdHdvLnByaWNlKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gPz8g0J3QtSDQt9Cw0L/Rg9GB0LrQsNC10YLRgdGPINC60L7QtCDQvdCw0YfQuNC90LDRjyDRgSB0aGVuKCkg0L3QsCAzOCDRgdGC0YDQvtC60LVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZS5hbGwoW1xuICAgIGFwaVNlYXJjaC5maW5kKHNlYXJjaEZvcm1EYXRhKSxcbiAgICBzZGtTZWFyY2guZmluZChzZWFyY2hGb3JtRGF0YSlcbiAgXSkudGhlbigocmVzdWx0cykgPT4ge1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpXG4gICAgLy8g0LzQtdGA0LTQttC40Lwg0LLRgdC1INGA0LXQt9GD0LvRjNGC0LDRgtGLINCyINC+0LTQuNC9XG4gICAgY29uc3QgYWxsUmVzdWx0czogUGxhY2VbXSA9IFtdLmNvbmNhdChyZXN1bHRzWzBdLCByZXN1bHRzWzFdKVxuICAgIGNvbnNvbGUubG9nKGFsbFJlc3VsdHMpXG4gICAgLy8g0YDQsNCx0L7RgtCw0LXQvCDRgSDQvdC40LzQuCDQutCw0Log0YEg0LXQtNC40L3Ri9C8INGG0LXQu9GL0LxcbiAgICBhbGxSZXN1bHRzLnNvcnQoc29ydEJ5UHJpY2UpXG4gICAgY29uc29sZS5sb2coYWxsUmVzdWx0cylcbiAgICByZW5kZXJTZWFyY2hSZXN1bHRzQmxvY2soYWxsUmVzdWx0cylcbiAgfSlcblxufVxuXG5cblxuXG4iXX0=