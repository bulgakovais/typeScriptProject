import { renderSearchResultsBlock } from "../search-results.js";
import { APIProvider } from "../store/providers/Api/api-provider.js";
import { SDKProvider } from '../store/providers/SDK/sdk-provider.js';
import { getSearchData } from "./getSearchData.js";
import { sortByPriceFirstMin } from "./sortHandler.js";
export async function searchHandler() {
    const { getdateIn, getdateOut, getmaxPrice } = getSearchData();
    const searchFormData = {
        city: 'Санкт-Петербург',
        checkInDate: new Date(getdateIn),
        checkOutDate: new Date(getdateOut),
        priceLimit: getmaxPrice
    };
    const sdkSearch = new SDKProvider();
    const apiSearch = new APIProvider();
    //  Checkboxes
    const chboxApi = document.querySelector("#search-api");
    const chboxSdk = document.querySelector("#search-sdk");
    async function logicSearcher(provider) {
        const result = await provider.find(searchFormData);
        result.sort(sortByPriceFirstMin);
        renderSearchResultsBlock(result);
    }
    if (getdateIn && getdateOut && searchFormData.priceLimit) {
        if (chboxApi.checked && chboxSdk.checked) {
            const results = await Promise.all([
                apiSearch.find(searchFormData),
                sdkSearch.find(searchFormData)
            ]);
            // мерджим все результаты в один
            const allResults = [].concat(results[0], results[1]);
            // работаем с ними как с единым целым
            allResults.sort(sortByPriceFirstMin);
            renderSearchResultsBlock(allResults);
        }
        if (chboxApi.checked) {
            logicSearcher(apiSearch);
        }
        if (chboxSdk.checked) {
            logicSearcher(sdkSearch);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9zZWFyY2gtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUkvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0NBQXdDLENBQUE7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUV0RCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWE7SUFFakMsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsYUFBYSxFQUFFLENBQUE7SUFFOUQsTUFBTSxjQUFjLEdBQW1CO1FBQ3JDLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxZQUFZLEVBQUUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2xDLFVBQVUsRUFBRSxXQUFXO0tBQ3hCLENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFBO0lBQ25DLE1BQU0sU0FBUyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUE7SUFDbkMsY0FBYztJQUNkLE1BQU0sUUFBUSxHQUFxQixRQUFRLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ3hFLE1BQU0sUUFBUSxHQUFxQixRQUFRLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBR3hFLEtBQUssVUFBVSxhQUFhLENBQUMsUUFBa0I7UUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUNoQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBR0QsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUU7UUFDeEQsSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFFeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUNoQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztnQkFDOUIsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7YUFDL0IsQ0FBQyxDQUFBO1lBQ0YsZ0NBQWdDO1lBQ2hDLE1BQU0sVUFBVSxHQUFZLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzdELHFDQUFxQztZQUNyQyxVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUE7WUFDcEMsd0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDckM7UUFFRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDcEIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ3pCO1FBRUQsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3BCLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUN6QjtLQUVGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgcmVuZGVyU2VhcmNoUmVzdWx0c0Jsb2NrIH0gZnJvbSBcIi4uL3NlYXJjaC1yZXN1bHRzLmpzXCJcbmltcG9ydCB7IFBsYWNlIH0gZnJvbSBcIi4uL3N0b3JlL2RvbWFpbi9wbGFjZS5qc1wiXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCIuLi9zdG9yZS9kb21haW4vcHJvdmlkZXIuanNcIlxuaW1wb3J0IHsgU2VhcmNoRm9ybURhdGEgfSBmcm9tIFwiLi4vc3RvcmUvZG9tYWluL3NlYXJjaC1maWx0ZXIuanNcIlxuaW1wb3J0IHsgQVBJUHJvdmlkZXIgfSBmcm9tIFwiLi4vc3RvcmUvcHJvdmlkZXJzL0FwaS9hcGktcHJvdmlkZXIuanNcIlxuaW1wb3J0IHsgU0RLUHJvdmlkZXIgfSBmcm9tICcuLi9zdG9yZS9wcm92aWRlcnMvU0RLL3Nkay1wcm92aWRlci5qcydcbmltcG9ydCB7IGdldFNlYXJjaERhdGEgfSBmcm9tIFwiLi9nZXRTZWFyY2hEYXRhLmpzXCJcbmltcG9ydCB7IHNvcnRCeVByaWNlRmlyc3RNaW4gfSBmcm9tIFwiLi9zb3J0SGFuZGxlci5qc1wiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hIYW5kbGVyKCk6IFByb21pc2U8dm9pZD4ge1xuXG4gIGNvbnN0IHsgZ2V0ZGF0ZUluLCBnZXRkYXRlT3V0LCBnZXRtYXhQcmljZSB9ID0gZ2V0U2VhcmNoRGF0YSgpXG5cbiAgY29uc3Qgc2VhcmNoRm9ybURhdGE6IFNlYXJjaEZvcm1EYXRhID0ge1xuICAgIGNpdHk6ICfQodCw0L3QutGCLdCf0LXRgtC10YDQsdGD0YDQsycsXG4gICAgY2hlY2tJbkRhdGU6IG5ldyBEYXRlKGdldGRhdGVJbiksXG4gICAgY2hlY2tPdXREYXRlOiBuZXcgRGF0ZShnZXRkYXRlT3V0KSxcbiAgICBwcmljZUxpbWl0OiBnZXRtYXhQcmljZVxuICB9XG5cbiAgY29uc3Qgc2RrU2VhcmNoID0gbmV3IFNES1Byb3ZpZGVyKClcbiAgY29uc3QgYXBpU2VhcmNoID0gbmV3IEFQSVByb3ZpZGVyKClcbiAgLy8gIENoZWNrYm94ZXNcbiAgY29uc3QgY2hib3hBcGk6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1hcGlcIilcbiAgY29uc3QgY2hib3hTZGs6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1zZGtcIilcblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGxvZ2ljU2VhcmNoZXIocHJvdmlkZXI6IFByb3ZpZGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuZmluZChzZWFyY2hGb3JtRGF0YSlcbiAgICByZXN1bHQuc29ydChzb3J0QnlQcmljZUZpcnN0TWluKVxuICAgIHJlbmRlclNlYXJjaFJlc3VsdHNCbG9jayhyZXN1bHQpXG4gIH1cblxuXG4gIGlmIChnZXRkYXRlSW4gJiYgZ2V0ZGF0ZU91dCAmJiBzZWFyY2hGb3JtRGF0YS5wcmljZUxpbWl0KSB7XG4gICAgaWYgKGNoYm94QXBpLmNoZWNrZWQgJiYgY2hib3hTZGsuY2hlY2tlZCkge1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBhcGlTZWFyY2guZmluZChzZWFyY2hGb3JtRGF0YSksXG4gICAgICAgIHNka1NlYXJjaC5maW5kKHNlYXJjaEZvcm1EYXRhKVxuICAgICAgXSlcbiAgICAgIC8vINC80LXRgNC00LbQuNC8INCy0YHQtSDRgNC10LfRg9C70YzRgtCw0YLRiyDQsiDQvtC00LjQvVxuICAgICAgY29uc3QgYWxsUmVzdWx0czogUGxhY2VbXSA9IFtdLmNvbmNhdChyZXN1bHRzWzBdLCByZXN1bHRzWzFdKVxuICAgICAgLy8g0YDQsNCx0L7RgtCw0LXQvCDRgSDQvdC40LzQuCDQutCw0Log0YEg0LXQtNC40L3Ri9C8INGG0LXQu9GL0LxcbiAgICAgIGFsbFJlc3VsdHMuc29ydChzb3J0QnlQcmljZUZpcnN0TWluKVxuICAgICAgcmVuZGVyU2VhcmNoUmVzdWx0c0Jsb2NrKGFsbFJlc3VsdHMpXG4gICAgfVxuXG4gICAgaWYgKGNoYm94QXBpLmNoZWNrZWQpIHtcbiAgICAgIGxvZ2ljU2VhcmNoZXIoYXBpU2VhcmNoKVxuICAgIH1cblxuICAgIGlmIChjaGJveFNkay5jaGVja2VkKSB7XG4gICAgICBsb2dpY1NlYXJjaGVyKHNka1NlYXJjaClcbiAgICB9XG5cbiAgfVxufVxuIl19