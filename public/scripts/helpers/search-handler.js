import { renderSearchResultsBlock } from "../search-results.js";
import { APIProvider } from "../store/providers/Api/api-provider.js";
import { SDKProvider } from '../store/providers/SDK/sdk-provider.js';
import { getSearchData } from "./getSearchData.js";
import { sortByPriceFirstMin } from "./sortHandler.js";
export function searchHandler() {
    const { getdateIn, getdateOut, getmaxPrice } = getSearchData();
    const searchFormData = {
        city: 'Санкт-Петербург',
        checkInDate: new Date(getdateIn),
        checkOutDate: new Date(getdateOut),
        priceLimit: getmaxPrice
    };
    const sdkSearch = new SDKProvider();
    const apiSearch = new APIProvider();
    //  Checkboxes
    const chboxApi = document.querySelector("#search-api");
    const chboxSdk = document.querySelector("#search-sdk");
    function logicSearcher(provider) {
        return provider.find(searchFormData).then((result) => {
            result.sort(sortByPriceFirstMin);
            renderSearchResultsBlock(result);
        });
    }
    if (getdateIn && getdateOut && searchFormData.priceLimit) {
        if (chboxApi.checked && chboxSdk.checked) {
            return Promise.all([
                apiSearch.find(searchFormData),
                sdkSearch.find(searchFormData)
            ]).then((results) => {
                // мерджим все результаты в один
                const allResults = [].concat(results[0], results[1]);
                // работаем с ними как с единым целым
                allResults.sort(sortByPriceFirstMin);
                renderSearchResultsBlock(allResults);
            });
        }
        if (chboxApi.checked) {
            logicSearcher(apiSearch);
        }
        if (chboxSdk.checked) {
            logicSearcher(sdkSearch);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9zZWFyY2gtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUcvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0NBQXdDLENBQUE7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUV0RCxNQUFNLFVBQVUsYUFBYTtJQUUzQixNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsR0FBRyxhQUFhLEVBQUUsQ0FBQTtJQUU5RCxNQUFNLGNBQWMsR0FBbUI7UUFDckMsSUFBSSxFQUFFLGlCQUFpQjtRQUN2QixXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbEMsVUFBVSxFQUFFLFdBQVc7S0FDeEIsQ0FBQTtJQUVELE1BQU0sU0FBUyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUE7SUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQTtJQUNuQyxjQUFjO0lBQ2QsTUFBTSxRQUFRLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDeEUsTUFBTSxRQUFRLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUE7SUFHeEUsU0FBUyxhQUFhLENBQUMsUUFBUTtRQUM3QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1lBQ2hDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2xDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUdELElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLENBQUMsVUFBVSxFQUFFO1FBQ3hELElBQUksUUFBUSxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBRXhDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDakIsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7Z0JBQzlCLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2FBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbEIsZ0NBQWdDO2dCQUNoQyxNQUFNLFVBQVUsR0FBWSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDN0QscUNBQXFDO2dCQUNyQyxVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUE7Z0JBQ3BDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ3RDLENBQUMsQ0FBQyxDQUFBO1NBQ0g7UUFFRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDcEIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ3pCO1FBRUQsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3BCLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUN6QjtLQUVGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgcmVuZGVyU2VhcmNoUmVzdWx0c0Jsb2NrIH0gZnJvbSBcIi4uL3NlYXJjaC1yZXN1bHRzLmpzXCJcbmltcG9ydCB7IFBsYWNlIH0gZnJvbSBcIi4uL3N0b3JlL2RvbWFpbi9wbGFjZS5qc1wiXG5pbXBvcnQgeyBTZWFyY2hGb3JtRGF0YSB9IGZyb20gXCIuLi9zdG9yZS9kb21haW4vc2VhcmNoLWZpbHRlci5qc1wiXG5pbXBvcnQgeyBBUElQcm92aWRlciB9IGZyb20gXCIuLi9zdG9yZS9wcm92aWRlcnMvQXBpL2FwaS1wcm92aWRlci5qc1wiXG5pbXBvcnQgeyBTREtQcm92aWRlciB9IGZyb20gJy4uL3N0b3JlL3Byb3ZpZGVycy9TREsvc2RrLXByb3ZpZGVyLmpzJ1xuaW1wb3J0IHsgZ2V0U2VhcmNoRGF0YSB9IGZyb20gXCIuL2dldFNlYXJjaERhdGEuanNcIlxuaW1wb3J0IHsgc29ydEJ5UHJpY2VGaXJzdE1pbiB9IGZyb20gXCIuL3NvcnRIYW5kbGVyLmpzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaEhhbmRsZXIoKSB7XG5cbiAgY29uc3QgeyBnZXRkYXRlSW4sIGdldGRhdGVPdXQsIGdldG1heFByaWNlIH0gPSBnZXRTZWFyY2hEYXRhKClcblxuICBjb25zdCBzZWFyY2hGb3JtRGF0YTogU2VhcmNoRm9ybURhdGEgPSB7XG4gICAgY2l0eTogJ9Ch0LDQvdC60YIt0J/QtdGC0LXRgNCx0YPRgNCzJyxcbiAgICBjaGVja0luRGF0ZTogbmV3IERhdGUoZ2V0ZGF0ZUluKSxcbiAgICBjaGVja091dERhdGU6IG5ldyBEYXRlKGdldGRhdGVPdXQpLFxuICAgIHByaWNlTGltaXQ6IGdldG1heFByaWNlXG4gIH1cblxuICBjb25zdCBzZGtTZWFyY2ggPSBuZXcgU0RLUHJvdmlkZXIoKVxuICBjb25zdCBhcGlTZWFyY2ggPSBuZXcgQVBJUHJvdmlkZXIoKVxuICAvLyAgQ2hlY2tib3hlc1xuICBjb25zdCBjaGJveEFwaTogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2VhcmNoLWFwaVwiKVxuICBjb25zdCBjaGJveFNkazogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2VhcmNoLXNka1wiKVxuXG5cbiAgZnVuY3Rpb24gbG9naWNTZWFyY2hlcihwcm92aWRlcikge1xuICAgIHJldHVybiBwcm92aWRlci5maW5kKHNlYXJjaEZvcm1EYXRhKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIHJlc3VsdC5zb3J0KHNvcnRCeVByaWNlRmlyc3RNaW4pXG4gICAgICByZW5kZXJTZWFyY2hSZXN1bHRzQmxvY2socmVzdWx0KVxuICAgIH0pXG4gIH1cblxuXG4gIGlmIChnZXRkYXRlSW4gJiYgZ2V0ZGF0ZU91dCAmJiBzZWFyY2hGb3JtRGF0YS5wcmljZUxpbWl0KSB7XG4gICAgaWYgKGNoYm94QXBpLmNoZWNrZWQgJiYgY2hib3hTZGsuY2hlY2tlZCkge1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICBhcGlTZWFyY2guZmluZChzZWFyY2hGb3JtRGF0YSksXG4gICAgICAgIHNka1NlYXJjaC5maW5kKHNlYXJjaEZvcm1EYXRhKVxuICAgICAgXSkudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAvLyDQvNC10YDQtNC20LjQvCDQstGB0LUg0YDQtdC30YPQu9GM0YLQsNGC0Ysg0LIg0L7QtNC40L1cbiAgICAgICAgY29uc3QgYWxsUmVzdWx0czogUGxhY2VbXSA9IFtdLmNvbmNhdChyZXN1bHRzWzBdLCByZXN1bHRzWzFdKVxuICAgICAgICAvLyDRgNCw0LHQvtGC0LDQtdC8INGBINC90LjQvNC4INC60LDQuiDRgSDQtdC00LjQvdGL0Lwg0YbQtdC70YvQvFxuICAgICAgICBhbGxSZXN1bHRzLnNvcnQoc29ydEJ5UHJpY2VGaXJzdE1pbilcbiAgICAgICAgcmVuZGVyU2VhcmNoUmVzdWx0c0Jsb2NrKGFsbFJlc3VsdHMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChjaGJveEFwaS5jaGVja2VkKSB7XG4gICAgICBsb2dpY1NlYXJjaGVyKGFwaVNlYXJjaClcbiAgICB9XG5cbiAgICBpZiAoY2hib3hTZGsuY2hlY2tlZCkge1xuICAgICAgbG9naWNTZWFyY2hlcihzZGtTZWFyY2gpXG4gICAgfVxuXG4gIH1cbn1cbiJdfQ==